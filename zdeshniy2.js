import 'dotenv/config';
import { Telegraf, Markup } from "telegraf";
import fs from "fs";

const bot = new Telegraf(process.env.BOT_TOKEN);

const options = ["–ú–µ—Å—Ç—å —Å—É—Ä–∫–∞ –≤ 18:00", "–ú–µ—Å—Ç—å —Å—É—Ä–∫–∞ –≤ 20:00", "–ú–µ—Å—Ç—å —Å—É—Ä–∫–∞ –≤ 22:00"];
const votesFile = "./votes.json";
let votes = {}; // {user_id: choice}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º –≥–æ–ª–æ—Å–æ–≤
function loadVotes() {
    try {
        if (fs.existsSync(votesFile)) {
            const data = fs.readFileSync(votesFile, "utf8");
            votes = JSON.parse(data);
        }
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤:", err);
        votes = {};
    }
}

function saveVotes() {
    try {
        fs.writeFileSync(votesFile, JSON.stringify(votes, null, 2));
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤:", err);
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ReplyKeyboardMarkup
function getKeyboard() {
    return Markup.keyboard(options.map(opt => [opt]))
                 .resize()
                 .oneTime(false);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ—Å–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadVotes();

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(ctx => {
    ctx.reply("üìä –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ú–µ—Å—Ç—å —Å—É—Ä–∫–∞", getKeyboard());
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
bot.on("text", async (ctx) => {
    const text = ctx.message.text;
    const userId = ctx.from.id;

    if (!options.includes(text)) return;

    await handleVote(userId, ctx, text);
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function handleVote(userId, ctx, choice) {
    votes[userId] = choice;
    saveVotes(); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    // –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤
    const counts = {};
    options.forEach(opt => counts[opt] = 0);
    Object.values(votes).forEach(v => counts[v]++);

    let resultText = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n";
    options.forEach(opt => resultText += `${opt} : ${counts[opt]} –≥–æ–ª–æ—Å–æ–≤\n`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä—É–ø–ø—É
    await ctx.reply(resultText);
    
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.telegram.sendMessage(userId, "–ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É", { reply_markup: { remove_keyboard: true } });

    // –ß–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    setTimeout(async () => {
        await ctx.telegram.sendMessage(
            userId,
            "–ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è",
            { reply_markup: getKeyboard().reply_markup }
        );
    }, 60000);

}

bot.launch();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");
